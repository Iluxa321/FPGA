`timescale 1 ns / 1 ps

module test_fft_pipeline2;
	reg clk, reset, load, start;
	reg [31:0] in_data;
	reg [4:0] addr_wr, addr_rd;
	wire done;
	wire [31:0] o;
	integer i, re, img, res;
	
	
	
	reg flag;
	
	event reset_event, reset_done;
	event load_event;
	
	fft_pipeline dut(
		.clk(clk),
		.reset(reset),
		.load(load),
		.start(start),
		.in_data(in_data),
		.addr_wr(addr_wr), .addr_rd(addr_rd),
		.fft_done(done),
		.o_data(o)
		);
		
	initial begin
		clk = 0;
		reset = 0;
		-> reset_event;
		forever begin
			#5 clk = ~clk;
		end
	end
	
	initial begin: RESET
		@(reset_event);
		@(negedge clk);
		reset = 1;
		@(negedge clk)
		reset = 0;
		-> load_event;
	end
	
	initial begin: LOAD
		forever begin
			@(load_event);
			load = 1;
			load_data();
			$stop;
		end
	end


task load_data();
	integer i;
	reg [31:0] data [31:0];
	reg [5:0] cnt;
	initial begin
			cnt = 0;
			$readmemh("data2.dat",data);
		end
	begin
		
		for(i = 0; i < 32; i = i + 1) begin
			@(negedge clk);
			addr_wr = {cnt[0], cnt[1], cnt[2], cnt[3], cnt[4]};
			in_data = data[cnt[4:0]];
			@(posedge clk);
			cnt = cnt + 1;
		end
	end
endtask

	
endmodule




